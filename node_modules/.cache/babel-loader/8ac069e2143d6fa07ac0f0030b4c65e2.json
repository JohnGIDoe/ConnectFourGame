{"ast":null,"code":"var _jsxFileName = \"/home/mrg/Pulpit/connect-four/ConnectFourGame/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Popup from \"reactjs-popup\"; // single coin spot\n\nfunction CoinSpot(props) {\n  return React.createElement(\"div\", {\n    className: \"coin-spot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: props.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }));\n} // Popup component with game rules\n\n\nconst PopupRules = () => React.createElement(Popup, {\n  trigger: React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \" How to Play \"),\n  position: \"bottom center\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, \"The object of Connect Four is to get four stones of your own color (red or yellow) in a row, horizontal, vertical or diagonal. Every turn a player places a stone on the board. Red moves first; moves are made alternatively, one by turn. Moves entails in placing new pieces on the board; pieces slide downwards from upper holes, falling down to the last row or piling up on the last piece introduced in the same column. So, in every turn the introduced piece may be placed at most on seven different squares. The winner is the first player who gets a straight line made with four own pieces and no gaps between them.\")); // Our board component\n\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coinSpots: create2DArray(),\n      player1: true\n    };\n  } //\n\n\n  updateColumn(i) {\n    const coins = this.state.coinSpots.slice();\n\n    for (let index = 5; index >= 0; index--) {\n      if (coins[i][index] !== \"red\" && coins[i][index] !== \"yellow\") {\n        coins[i][index] = this.state.player1 ? \"red\" : \"yellow\";\n        return coins;\n      }\n    }\n\n    return coins;\n  }\n\n  handleClick(i) {\n    if (checkWinner(this.state.coinSpots)) {\n      return;\n    }\n\n    if (this.isFullColumn(i)) {\n      alert(\"Read the game rules under 'How to play' button. You have to choose a column with empty spaces\");\n      return;\n    }\n\n    let spots = this.updateColumn(i);\n    this.setState({\n      coinSpots: spots,\n      player1: !this.state.player1\n    });\n  }\n\n  isFullColumn(i) {\n    for (let index = 5; index >= 0; index--) {\n      if (this.state.coinSpots[i][index] === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  renderCoinSpot(i, y) {\n    return React.createElement(CoinSpot, {\n      value: this.state.coinSpots[i][y] || \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }\n\n  renderColumn(i) {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      onClick: () => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.renderCoinSpot(i, 0), this.renderCoinSpot(i, 1), this.renderCoinSpot(i, 2), this.renderCoinSpot(i, 3), this.renderCoinSpot(i, 4), this.renderCoinSpot(i, 5));\n  }\n\n  restartGame() {\n    this.setState({\n      coinSpots: create2DArray(),\n      player1: true\n    });\n  }\n\n  render() {\n    let status = this.state.player1 ? \"Now it's red's turn\" : \"Now it's yellow's turn\";\n    const winner = checkWinner(this.state.coinSpots);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"reset-btn\",\n      onClick: () => this.restartGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"New Game\"), React.createElement(PopupRules, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.renderColumn(0), this.renderColumn(1), this.renderColumn(2), this.renderColumn(3), this.renderColumn(4), this.renderColumn(5), this.renderColumn(6)), !winner ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, status, React.createElement(\"svg\", {\n      height: \"50\",\n      width: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      cx: \"30\",\n      cy: \"30\",\n      r: \"20\",\n      stroke: \"none\",\n      fill: status === \"Now it's red's turn\" ? \"red\" : \"yellow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })))) : React.createElement(\"h2\", {\n      className: \"winner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"The winner is \", winner, React.createElement(\"svg\", {\n      height: \"50\",\n      width: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      cx: \"30\",\n      cy: \"30\",\n      r: \"20\",\n      stroke: \"none\",\n      fill: winner === 'red' ? \"red\" : \"yellow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Connect 4 Game\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Board, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })));\n  }\n\n}\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 158\n  },\n  __self: this\n}), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\nfunction create2DArray() {\n  let board = new Array(7);\n\n  for (let i = 0; i < board.length; i++) {\n    board[i] = new Array(6).fill(0);\n  }\n\n  return board;\n}\n\nfunction checkWinner(board) {\n  return checkVertical(board) || checkDiagonalRight(board) || checkDiagonalLeft(board) || checkHorizontal(board);\n}\n\nfunction checkVertical(board) {\n  // Check only if row is 3 or greater\n  for (let r = 3; r < 7; r++) {\n    for (let c = 0; c < 6; c++) {\n      if (board[r][c]) {\n        if (board[r][c] === board[r - 1][c] && board[r][c] === board[r - 2][c] && board[r][c] === board[r - 3][c]) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}\n\nfunction checkHorizontal(board) {\n  // Check only if column is 3 or less\n  for (let r = 0; r < 7; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (board[r][c]) {\n        if (board[r][c] === board[r][c + 1] && board[r][c] === board[r][c + 2] && board[r][c] === board[r][c + 3]) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}\n\nfunction checkDiagonalRight(board) {\n  // Check only if row is 3 or greater AND column is 3 or less\n  for (let r = 3; r < 7; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (board[r][c]) {\n        if (board[r][c] === board[r - 1][c + 1] && board[r][c] === board[r - 2][c + 2] && board[r][c] === board[r - 3][c + 3]) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}\n\nfunction checkDiagonalLeft(board) {\n  // Check only if row is 3 or greater AND column is 3 or greater\n  for (let r = 3; r < 7; r++) {\n    for (let c = 3; c < 6; c++) {\n      if (board[r][c]) {\n        if (board[r][c] === board[r - 1][c - 1] && board[r][c] === board[r - 2][c - 2] && board[r][c] === board[r - 3][c - 3]) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/mrg/Pulpit/connect-four/ConnectFourGame/src/index.js"],"names":["React","ReactDOM","serviceWorker","Popup","CoinSpot","props","value","PopupRules","Board","Component","constructor","state","coinSpots","create2DArray","player1","updateColumn","i","coins","slice","index","handleClick","checkWinner","isFullColumn","alert","spots","setState","renderCoinSpot","y","renderColumn","restartGame","render","status","winner","Game","document","getElementById","unregister","board","Array","length","fill","checkVertical","checkDiagonalRight","checkDiagonalLeft","checkHorizontal","r","c"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Popup from \"reactjs-popup\";\n\n// single coin spot\nfunction CoinSpot(props) {\n  return (\n    <div className=\"coin-spot\">\n      <button className={props.value} />\n    </div>\n  );\n}\n\n// Popup component with game rules\nconst PopupRules =  () => (\n  <Popup trigger={<button> How to Play </button>} position=\"bottom center\">\n    <div>\n    The object of Connect Four is to get four stones of your own color (red or yellow) in a row, horizontal, vertical or diagonal. Every turn a player places a stone on the board.\n    Red moves first; moves are made alternatively, one by turn.\n\nMoves entails in placing new pieces on the board; pieces slide downwards from upper holes, falling down to the last row or piling up on the last piece introduced in the same column. So, in every turn the introduced piece may be placed at most on seven different squares.\n\nThe winner is the first player who gets a straight line made with four own pieces and no gaps between them.\n    </div>\n  </Popup>\n)\n\n// Our board component\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coinSpots: create2DArray(),\n      player1: true\n    };\n  }\n  //\n  updateColumn(i) {\n    const coins = this.state.coinSpots.slice();\n    for (let index = 5; index >= 0; index--) {\n      if (coins[i][index] !== \"red\" && coins[i][index] !== \"yellow\") {\n        coins[i][index] = this.state.player1 ? \"red\" : \"yellow\";\n        return coins;\n      }\n    }\n    return coins;\n  }\n\n  handleClick(i) {\n    if (checkWinner(this.state.coinSpots)){\n      return;\n    }\n    if (this.isFullColumn(i)) {\n      alert(\"Read the game rules under 'How to play' button. You have to choose a column with empty spaces\");\n      return;\n    }\n    let spots = this.updateColumn(i);\n    this.setState({\n      coinSpots: spots,\n      player1: !this.state.player1\n    });\n  }\n\n  isFullColumn(i) {\n    for (let index = 5; index >= 0; index--) {\n      if (this.state.coinSpots[i][index] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  renderCoinSpot(i, y) {\n    return <CoinSpot value={this.state.coinSpots[i][y] || \"white\"} />;\n  }\n\n  renderColumn(i) {\n    return (\n      <div className=\"board-row\" onClick={() => this.handleClick(i)}>\n        {this.renderCoinSpot(i, 0)}\n        {this.renderCoinSpot(i, 1)}\n        {this.renderCoinSpot(i, 2)}\n        {this.renderCoinSpot(i, 3)}\n        {this.renderCoinSpot(i, 4)}\n        {this.renderCoinSpot(i, 5)}\n      </div>\n    );\n  }\n\n  restartGame() {\n    this.setState({\n      coinSpots: create2DArray(),\n      player1: true\n    });\n  }\n\n  \n\n  render() {\n    let status = this.state.player1\n      ? `Now it's red's turn`\n      : `Now it's yellow's turn`;\n    const winner = checkWinner(this.state.coinSpots);\n    return (\n      <div>\n        <div className=\"buttons\">\n          <button className=\"reset-btn\" onClick={() => this.restartGame()}>\n            New Game\n          </button>\n          <PopupRules />\n        </div>\n        <div className=\"game-board\">\n          {this.renderColumn(0)}\n          {this.renderColumn(1)}\n          {this.renderColumn(2)}\n          {this.renderColumn(3)}\n          {this.renderColumn(4)}\n          {this.renderColumn(5)}\n          {this.renderColumn(6)}\n        </div>\n        {!winner ? (\n          <div>\n            <h2 className=\"status\">\n              {status}\n                <svg height=\"50\" width=\"50\">\n                  <circle cx=\"30\" cy=\"30\" r=\"20\" stroke=\"none\" fill={status === `Now it's red's turn` ? \"red\" : \"yellow\"} />\n                </svg>\n            </h2>\n          </div>\n        ) : (\n          <h2 className=\"winner\">The winner is {winner}<svg height=\"50\" width=\"50\">\n                  <circle cx=\"30\" cy=\"30\" r=\"20\" stroke=\"none\" fill={winner === 'red' ? \"red\" : \"yellow\"}/>\n                </svg></h2>\n        )}\n      </div>\n      \n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"Title\">\n          <h1>Connect 4 Game</h1>\n        </div>\n        <div>\n          <Board />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction create2DArray() {\n  let board = new Array(7);\n  for (let i = 0; i < board.length; i++) {\n    board[i] = new Array(6).fill(0);\n  }\n  return board;\n}\n\nfunction checkWinner(board) {\n  return (\n    checkVertical(board) ||\n    checkDiagonalRight(board) ||\n    checkDiagonalLeft(board) ||\n    checkHorizontal(board)\n  );\n}\n\nfunction checkVertical(board) {\n  // Check only if row is 3 or greater\n  for (let r = 3; r < 7; r++) {\n    for (let c = 0; c < 6; c++) {\n      if (board[r][c]) {\n        if (\n          board[r][c] === board[r - 1][c] &&\n          board[r][c] === board[r - 2][c] &&\n          board[r][c] === board[r - 3][c]\n        ) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}\n\nfunction checkHorizontal(board) {\n  // Check only if column is 3 or less\n  for (let r = 0; r < 7; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (board[r][c]) {\n        if (\n          board[r][c] === board[r][c + 1] &&\n          board[r][c] === board[r][c + 2] &&\n          board[r][c] === board[r][c + 3]\n        ) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}\n\nfunction checkDiagonalRight(board) {\n  // Check only if row is 3 or greater AND column is 3 or less\n  for (let r = 3; r < 7; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (board[r][c]) {\n        if (\n          board[r][c] === board[r - 1][c + 1] &&\n          board[r][c] === board[r - 2][c + 2] &&\n          board[r][c] === board[r - 3][c + 3]\n        ) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}\n\nfunction checkDiagonalLeft(board) {\n  // Check only if row is 3 or greater AND column is 3 or greater\n  for (let r = 3; r < 7; r++) {\n    for (let c = 3; c < 6; c++) {\n      if (board[r][c]) {\n        if (\n          board[r][c] === board[r - 1][c - 1] &&\n          board[r][c] === board[r - 2][c - 2] &&\n          board[r][c] === board[r - 3][c - 3]\n        ) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}